generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/team_task_manager/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Authentication models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Core application models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  firstName     String?
  lastName      String?
  role          UserRole  @default(MEMBER)
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  accounts           Account[]
  sessions           Session[]
  teamMemberships    TeamMember[]
  createdTasks       Task[]       @relation("TaskCreatedBy")
  assignedTasks      Task[]       @relation("TaskAssignedTo")
  comments           Comment[]
  sentNotifications  Notification[] @relation("NotificationFrom")
  notifications      Notification[] @relation("NotificationTo")
  createdTeams       Team[]       @relation("TeamCreatedBy")
  createdProjects    Project[]    @relation("ProjectCreatedBy")
  apiKeys            ApiKey[]
  attachments        Attachment[]
  savedSearches      SavedSearch[]

  @@index([email])
}

model Team {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  
  // Relations
  members   TeamMember[]
  tasks     Task[]
  projects  Project[]
  creator   User         @relation("TeamCreatedBy", fields: [createdById], references: [id])
  
  @@index([name])
}

model TeamMember {
  id       String         @id @default(cuid())
  userId   String
  teamId   String
  role     TeamMemberRole @default(MEMBER)
  joinedAt DateTime       @default(now())
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  @@unique([userId, teamId])
  @@index([teamId])
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus @default(ACTIVE)
  startDate   DateTime?
  dueDate     DateTime?
  teamId      String
  createdById String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relations
  team        Team    @relation(fields: [teamId], references: [id], onDelete: Cascade)
  createdBy   User    @relation("ProjectCreatedBy", fields: [createdById], references: [id])
  tasks       Task[]
  
  @@index([teamId])
  @@index([status])
  @@index([createdById])
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    Priority   @default(MEDIUM)
  dueDate     DateTime?
  completedAt DateTime?
  position    Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  createdById String
  assignedToId String?
  teamId      String
  projectId   String?
  
  // Relations
  createdBy   User        @relation("TaskCreatedBy", fields: [createdById], references: [id])
  assignedTo  User?       @relation("TaskAssignedTo", fields: [assignedToId], references: [id])
  team        Team        @relation(fields: [teamId], references: [id], onDelete: Cascade)
  project     Project?    @relation(fields: [projectId], references: [id], onDelete: SetNull)
  comments    Comment[]
  recurringTaskSeries RecurringTaskSeries?

  @@index([teamId])
  @@index([assignedToId])
  @@index([status])
  @@index([priority])
  @@index([dueDate])
  @@index([projectId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  taskId    String
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  
  @@index([taskId])
  @@index([createdAt])
}

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  type      NotificationType @default(INFO)
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  fromId    String?
  toId      String
  entityId  String?          // ID of related entity (task, team, etc.)
  entityType String?         // Type of entity (task, team, etc.)
  
  // Relations
  from User? @relation("NotificationFrom", fields: [fromId], references: [id])
  to   User  @relation("NotificationTo", fields: [toId], references: [id], onDelete: Cascade)
  
  @@index([toId])
  @@index([isRead])
  @@index([createdAt])
}

// Phase 2 Models

model ApiKey {
  id        String   @id @default(cuid())
  userId    String
  name      String
  keyHash   String   @unique
  scopes    String[]
  active    Boolean  @default(true)
  lastUsed  DateTime?
  createdAt DateTime @default(now())
  expiresAt DateTime?

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([keyHash])
  @@index([active])
}

model Attachment {
  id               String               @id @default(cuid())
  entityType       AttachmentEntityType
  entityId         String
  filename         String
  originalName     String
  fileSize         Int
  mimeType         String
  cloudStoragePath String
  uploadedById     String
  uploadedAt       DateTime             @default(now())

  // Relations
  uploadedBy User @relation(fields: [uploadedById], references: [id], onDelete: Cascade)

  @@index([entityType, entityId])
  @@index([uploadedById])
}

model RecurringTaskSeries {
  id          String              @id @default(cuid())
  taskId      String              @unique
  frequency   RecurrenceFrequency
  interval    Int                 @default(1)
  daysOfWeek  Int[]               // for weekly patterns
  dayOfMonth  Int?                // for monthly patterns
  endDate     DateTime?
  nextDueDate DateTime
  active      Boolean             @default(true)
  createdAt   DateTime            @default(now())

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([active])
  @@index([nextDueDate])
}

model SavedSearch {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  filters     Json     // Store search filters as JSON
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// Enums
enum UserRole {
  ADMIN
  MANAGER
  MEMBER
}

enum TeamMemberRole {
  OWNER
  ADMIN
  MEMBER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  TASK_ASSIGNED
  TASK_COMPLETED
  TEAM_INVITATION
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum AttachmentEntityType {
  TASK
  PROJECT
  COMMENT
}

enum RecurrenceFrequency {
  DAILY
  WEEKLY
  MONTHLY
}